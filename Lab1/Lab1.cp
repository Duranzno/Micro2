#line 1 "C:/Users/Alejandro/Dropbox/Nube/universidad/2018-1/Microprocesadores II/Laboratorios/Micro2/Lab1/Lab1.c"
#line 1 "c:/users/alejandro/dropbox/nube/universidad/2018-1/microprocesadores ii/laboratorios/micro2/lab1/barras.h"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for dspic/include/math.h"





double fabs(double d);
double floor(double x);
double ceil(double x);
double frexp(double value, int * eptr);
double ldexp(double value, int newexp);
double modf(double val, double * iptr);
double sqrt(double x);
double atan(double f);
double asin(double x);
double acos(double x);
double atan2(double y,double x);
double sin(double f);
double cos(double f);
double tan(double x);
double exp(double x);
double log(double x);
double log10(double x);
double pow(double x, double y);
double sinh(double x);
double cosh(double x);
double tanh(double x);
#line 3 "c:/users/alejandro/dropbox/nube/universidad/2018-1/microprocesadores ii/laboratorios/micro2/lab1/barras.h"
const int BAR_HEIGHT=4;
const int BAR_WIDTH=5;
const int WHITE=0;
const int BLACK=1;

const int MAX_BAR_HEIGHT=BAR_HEIGHT*25;
const int BARS_H_LOCATIONS[5]={0,1,2,3,4};
typedef enum {Int0,Int1,Int2,Int3,Int4}Bars;
void bar_drawer(unsigned short x_left,unsigned short contador_barra);
int DrawableBars(int real_number_of_bars);

void barras(Bars interrupcion,int contador_barra) {
 switch(interrupcion){
 case Int0:


 bar_drawer(BARS_H_LOCATIONS[Int0],contador_barra);
 break;
 case Int1:
 bar_drawer(BARS_H_LOCATIONS[Int1],contador_barra);
 break;
 case Int2:
 bar_drawer(BARS_H_LOCATIONS[Int2],contador_barra) ;
 break;
 case Int3:
 bar_drawer(BARS_H_LOCATIONS[Int3],contador_barra);
 break;
 case Int4:
 bar_drawer(BARS_H_LOCATIONS[Int4],contador_barra);
 break;
 default:
 break;
 }
}
void bar_drawer(unsigned short x_left,unsigned short contador_barra){


 int x_right=x_left+BAR_WIDTH;
 int y_bottom,y_top;
 int contador_reset=DrawableBars(contador_barra);
 if(contador_barra>1){
 if (contador_reset==1){

 Glcd_Box(x_left,MAX_BAR_HEIGHT,x_right,BAR_HEIGHT,WHITE);
 }
 else{

 y_bottom=DrawableBars(contador_barra)*BAR_HEIGHT;
 y_top=y_bottom+BAR_HEIGHT;
 Glcd_Box(x_left,y_top,x_right,y_bottom,BLACK);
 }
 }
}
int DrawableBars(int real_number_of_bars){


 if(real_number_of_bars>25){
 int quotient=real_number_of_bars/25;
 quotient=floor(quotient);
 return real_number_of_bars-25*quotient;
 }else{
 return real_number_of_bars;
 }
}
#line 1 "c:/users/alejandro/dropbox/nube/universidad/2018-1/microprocesadores ii/laboratorios/micro2/lab1/sprites.h"

const code char kirby_1[78] = {
0, 0, 128, 64, 96, 32, 56, 12, 6, 2, 3, 1, 41, 241, 1, 43, 242, 6, 12, 48, 32, 96, 192, 0, 0, 0,
0, 0, 3, 4, 8, 8, 24, 240, 224, 192, 192, 192, 192, 224, 152, 132, 194, 226, 226, 124, 60, 4, 3, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 3, 7, 7, 7, 7, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
};





const code char kirby_2[69] = {
 0, 0, 0, 128, 224, 56, 12, 4, 6, 2, 2, 210, 226, 2, 22, 228, 12, 56, 224, 128, 0, 0, 0,
 0, 30, 63, 33, 224, 224, 192, 128, 128, 0, 0, 0, 129, 64, 68, 65, 192, 224, 161, 49, 30, 0, 0,
 0, 0, 0, 0, 3, 7, 7, 6, 7, 3, 3, 7, 6, 6, 6, 6, 6, 7, 3, 0, 0, 0, 0
};


const code char kirby_3[69] = {
0, 0, 192, 96, 48, 16, 24, 8, 8, 8, 8, 168, 200, 8, 168, 208, 16, 96, 192, 0, 0, 0, 0,
0, 63, 97, 208, 160, 64, 64, 192, 96, 64, 64, 64, 67, 128, 136, 131, 128, 192, 113, 63, 0, 0, 0,
0, 0, 0, 0, 1, 1, 3, 7, 6, 6, 6, 6, 6, 6, 7, 3, 1, 0, 0, 0, 0, 0, 0
};





const code char kirby_4[69] = {
 0, 0, 0, 240, 60, 14, 6, 3, 1, 1, 1, 1, 1, 129, 11, 54, 230, 28, 240, 0, 0, 0, 0,
 0, 240, 184, 15, 56, 96, 192, 192, 192, 128, 128, 132, 128, 193, 192, 192, 224, 242, 255, 226, 126, 60, 0,
 0, 1, 3, 7, 6, 7, 7, 7, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0
};


const code char kirby_5[69] = {
0, 0, 192, 112, 24, 12, 4, 6, 2, 2, 2, 2, 2, 22, 230, 20, 236, 120, 224, 0, 0, 0, 0,
0, 252, 143, 8, 48, 96, 192, 144, 16, 16, 0, 4, 0, 128, 129, 132, 65, 48, 127, 64, 128, 0, 0,
0, 3, 7, 6, 6, 7, 3, 1, 1, 1, 1, 1, 3, 7, 7, 7, 7, 6, 6, 7, 3, 0, 0
};

const code char charmander_1[1024] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 32, 16, 0, 8, 8, 8, 8, 0, 16, 16, 160, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 64, 64, 64, 64, 64, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 62, 56, 16, 0, 0, 0, 16, 28, 174, 127, 252, 252, 255, 255, 240, 128, 0, 0, 0, 0, 0, 0, 0, 0, 8, 112, 224, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 134, 1, 0, 0, 0, 0, 0, 28, 36, 124, 120, 49, 6, 24, 96, 128, 0, 240, 56, 212, 8, 20, 24, 240, 0, 0, 128, 0, 192, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 8, 136, 200, 60, 26, 29, 142, 79, 55, 27, 3, 7, 143, 254, 248, 112, 64, 128, 0, 0, 0, 0, 0, 131, 255, 255, 252, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 152, 8, 104, 73, 15, 48, 64, 192, 128, 128, 80, 64, 32, 152, 151, 72, 48, 12, 1, 6, 1, 0, 0, 192, 112, 14, 1, 0, 1, 10, 21, 11, 151, 111, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 50, 41, 33, 16, 31, 96, 128, 14, 25, 20, 24, 8, 4, 62, 135, 1, 0, 0, 0, 0, 131, 252, 252, 254, 127, 63, 31, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 7, 135, 247, 15, 1, 1, 1, 0, 0, 0, 0, 0, 128, 64, 0, 0, 1, 3, 28, 112, 144, 16, 136, 136, 196, 226, 249, 62, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 32, 32, 17, 10, 140, 156, 248, 248, 232, 8, 5, 6, 124, 132, 6, 143, 29, 56, 240, 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 78, 81, 32, 32, 67, 204, 248, 240, 240, 96, 32, 32, 62, 57, 112, 224, 224, 64, 64, 64, 96, 95, 135, 7, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 2, 3, 2, 3, 1, 1, 0, 0, 0, 0, 0, 1, 2, 2, 3, 2, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};






const code char charmander_2[1024] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 32, 32, 16, 16, 16, 8, 4, 52, 122, 222, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 224, 56, 7, 0, 0, 63, 112, 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 12, 152, 56, 248, 112, 224, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 64, 124, 27, 0, 0, 0, 16, 32, 56, 252, 246, 226, 254, 255, 255, 254, 192, 192, 192, 192, 192, 192, 192, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 211, 128, 128, 0, 0, 48, 64, 192, 168, 248, 140, 255, 255, 254, 248, 192, 128, 128, 192, 64, 32, 32, 16, 16, 16, 136, 136, 136, 136, 136, 150, 116, 88, 183, 94, 191, 125, 58, 5, 63, 248, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 254, 248, 128, 0, 0, 0, 0, 7, 10, 16, 16, 244, 240, 240, 248, 248, 254, 255, 223, 143, 135, 131, 195, 227, 231, 223, 143, 79, 61, 248, 48, 49, 97, 193, 195, 227, 98, 254, 60, 28, 248, 176, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 17, 40, 224, 224, 232, 224, 248, 247, 255, 255, 127, 127, 127, 127, 127, 63, 31, 15, 255, 127, 119, 39, 39, 39, 67, 195, 131, 3, 1, 59, 127, 125, 240, 224, 240, 248, 244, 224, 30, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 103, 131, 31, 60, 120, 240, 240, 224, 224, 192, 192, 193, 103, 63, 31, 56, 16, 48, 33, 33, 33, 33, 33, 49, 147, 255, 255, 122, 121, 125, 126, 248, 240, 224, 128, 1, 2, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 96, 16, 136, 136, 132, 134, 207, 255, 63, 31, 31, 29, 24, 96, 128, 0, 0, 0, 8, 20, 39, 90, 138, 5, 1, 3, 3, 15, 31, 63, 255, 254, 248, 240, 248, 232, 132, 3, 192, 48, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 16, 51, 63, 127, 127, 255, 240, 192, 192, 192, 240, 248, 253, 254, 254, 254, 254, 254, 127, 115, 65, 128, 128, 128, 128, 128, 192, 224, 243, 255, 254, 248, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 38, 47, 18, 23, 28, 8, 7, 3, 1, 0, 0, 0, 0, 0, 0, 14, 49, 65, 66, 196, 228, 252, 248, 248, 240, 241, 227, 228, 228, 40, 44, 30, 23, 19, 11, 9, 5, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 10, 15, 23, 23, 23, 15, 23, 23, 31, 7, 3, 0, 0, 0, 0, 0, 8, 21, 23, 31, 47, 47, 47, 31, 47, 39, 23, 15, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 13, 20, 12, 17, 15, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

const code char blooper_1[175] = {
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 127, 63, 63, 63, 63, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 239, 231, 227, 1, 128, 128, 128, 128, 128, 128, 128, 128, 1, 227, 231, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 7, 9, 198, 6, 9, 143, 143, 9, 6, 198, 9, 7, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 224, 255, 240, 192, 255, 255, 192, 240, 255, 224, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
};

const code char blooper_2[175] = {
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 127, 63, 31, 15, 7, 3, 3, 3, 3, 7, 15, 31, 63, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 142, 6, 6, 0, 196, 4, 4, 204, 204, 4, 4, 196, 0, 6, 6, 142, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 252, 252, 255, 252, 255, 255, 252, 255, 252, 252, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
};

const code char blooper_3[175] = {
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 127, 63, 31, 15, 15, 15, 15, 31, 63, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 251, 249, 248, 64, 160, 160, 96, 224, 224, 96, 160, 160, 64, 248, 249, 251, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 2, 241, 1, 2, 227, 227, 2, 1, 241, 2, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 255, 252, 240, 255, 255, 240, 252, 255, 248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
};

const code char blooper_4[175] = {
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 191, 159, 143, 7, 3, 1, 0, 0, 0, 0, 1, 3, 7, 143, 159, 191, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 227, 193, 129, 0, 49, 193, 1, 243, 243, 1, 193, 49, 0, 129, 193, 227, 255, 255, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
};





const code char dog_1[210] = {
 0, 0, 0, 0, 192, 240, 248, 252, 252, 62, 28, 60, 248, 240, 112, 56, 56, 240, 240, 56, 56, 112, 240, 248, 60, 28, 62, 124, 120, 248, 248, 124, 60, 0, 0,
 0, 0, 0, 0, 3, 15, 31, 31, 129, 128, 0, 64, 15, 15, 88, 17, 58, 95, 95, 58, 17, 88, 15, 15, 64, 0, 128, 128, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 248, 254, 255, 255, 255, 242, 244, 200, 202, 136, 185, 132, 130, 130, 244, 249, 248, 250, 248, 252, 242, 255, 255, 255, 254, 248, 192, 0, 0, 0,
 0, 0, 0, 0, 0, 1, 15, 31, 63, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 63, 127, 127, 127, 63, 15, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};


const code char bullet_1[32] = {
0, 176, 184, 60, 126, 254, 254, 255, 255, 231, 198, 206, 252, 248, 192, 0,
14, 31, 29, 15, 0, 15, 31, 63, 63, 31, 31, 15, 15, 15, 15, 0
};

const code char bullet_2[32] = {
0, 128, 240, 248, 252, 252, 238, 198, 198, 238, 252, 252, 248, 240, 128, 0,
0, 31, 31, 31, 31, 63, 63, 127, 127, 63, 63, 31, 31, 31, 31, 0
};

const code char bullet_3[32] = {
0, 192, 248, 252, 206, 198, 231, 255, 255, 254, 254, 126, 60, 184, 176, 0,
0, 15, 15, 15, 15, 31, 31, 63, 63, 31, 15, 0, 15, 29, 31, 14
};
#line 5 "C:/Users/Alejandro/Dropbox/Nube/universidad/2018-1/Microprocesadores II/Laboratorios/Micro2/Lab1/Lab1.c"
sbit GLCD_D7 at RE1_bit;
sbit GLCD_D6 at RE0_bit;
sbit GLCD_D5 at RF1_bit;
sbit GLCD_D4 at RF0_bit;
sbit GLCD_D3 at RD7_bit;
sbit GLCD_D2 at RD6_bit;
sbit GLCD_D1 at RD5_bit;
sbit GLCD_D0 at RD4_bit;
sbit GLCD_D7_Direction at TRISE1_bit;
sbit GLCD_D6_Direction at TRISE0_bit;
sbit GLCD_D5_Direction at TRISF1_bit;
sbit GLCD_D4_Direction at TRISF0_bit;
sbit GLCD_D3_Direction at TRISD7_bit;
sbit GLCD_D2_Direction at TRISD6_bit;
sbit GLCD_D1_Direction at TRISD5_bit;
sbit GLCD_D0_Direction at TRISD4_bit;
sbit GLCD_CS1 at LATE3_bit;
sbit GLCD_CS2 at LATE2_bit;
sbit GLCD_RS at LATD1_bit;
sbit GLCD_RW at LATD2_bit;
sbit GLCD_EN at LATD3_bit;
sbit GLCD_RST at LATE4_bit;
sbit GLCD_CS1_Direction at TRISE3_bit;
sbit GLCD_CS2_Direction at TRISE2_bit;
sbit GLCD_RS_Direction at TRISD1_bit;
sbit GLCD_RW_Direction at TRISD2_bit;
sbit GLCD_EN_Direction at TRISD3_bit;
sbit GLCD_RST_Direction at TRISE4_bit;

unsigned short posicion=0;






void config_INT(){
 SRbits.IPL =0;
 INTCON1bits.NSTDIS =0;
 INTCON2bits.GIE=1;
 CORCONbits.IPL3 = 0;

 IEC0bits.INT0IE=1;
 IEC1bits.INT1IE=1;
 IEC1bits.INT2IE=1;
 IEC3bits.INT3IE=1;
 IEC3bits.INT4IE=1;

 IFS0bits.INT0IF=0;
 IFS1bits.INT2IF =0;
 IFS1bits.INT2IF =0 ;
 IFS3bits.INT3IF =0;
 IFS3bits.INT4IF =0;

 IPC0bits.INT0IP= 5;
 IPC5BITS.INT1IP= 4;
 IPC7bits.INT2IP =3;
 IPC13bits.INT3IP=2;
 IPC13bits.INT4IP=1;

 INTCON2bits.INT0EP=0;
 INTCON2bits.INT1EP=0;
 INTCON2bits.INT2EP=0;
 INTCON2bits.INT3EP=0;
 INTCON2bits.INT4EP =0;
}

const int BTN_PPS_LOCATIONS[5]={-1,37,36,35,34};

const int DIP_PPS_LOCATIONS[5]={32,33,38,39,40};
const int KEYBOARD_PPS_LOCATIONS[2]={100,101};
const int LED_PPS_LOCATIONS[3]={85,87,118};

void config_IO(){

 ANSELB=0;
 ANSELC=0; ANSELD=0; ANSELE=0;





 RPINR0bits.INT1R = BTN_PPS_LOCATIONS[1];
 RPINR1bits.INT2R = BTN_PPS_LOCATIONS[2];
 RPINR1bits.INT3R= BTN_PPS_LOCATIONS[3];
 RPINR2bits.INT4R= BTN_PPS_LOCATIONS[4];

}

void config_CN(){

 TRISB = 0;
 CNENBbits.CNIEB0=1;
 CNENBbits.CNIEB1=1;
 CNENBbits.CNIEB6=1;
 CNENBbits.CNIEB7=1;
 CNENBbits.CNIEB8=1;

 CNPUBbits.CNPUB0=1;
 CNPUBbits.CNPUB1=1;
 CNPUBbits.CNPUB6=1;
 CNPUBbits.CNPUB7=1;
 CNPUBbits.CNPUB8=1;

 IFS1bits.CNIF=0;
 IEC1bits.CNIE=1;



}
void config_LCD(){
 Glcd_Init();
 Glcd_Set_Font(font5x7 , 5, 7, 32);
 Glcd_Fill(0);
}

 void main(){
 config_INT();
 config_IO();

 config_LCD();

 while(1){






 if (RCONbits.WDTO==1)
 {
 Glcd_PartialImage(63,40,30,20,30,20,kirby_1); delay_ms(500);

 Glcd_Write_TEXT("WDT",0,1,BLACK);
 delay_ms(500);
 RCONbits.WDTO=0;
 }
 if(RCONbits.EXTR==1)
 {
 Glcd_PartialImage(63,40,30,20,30,20,kirby_3); delay_ms(500);

 Glcd_Write_TEXT("MCLR",0,2,BLACK); delay_ms(500);
 RCONbits.EXTR=0;
 }
 if (RCONbits.POR==1)
 {
 Glcd_PartialImage(63,40,30,20,30,20,kirby_2); delay_ms(500);

 Glcd_Write_TEXT("POR",0,3,BLACK); delay_ms(500);
 RCONbits.POR=0;

 }



 }



}
